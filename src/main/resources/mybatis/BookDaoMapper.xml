<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="pl.akai.bookcrossing.list.BookDaoMapper">

    <resultMap id="baseBookMap" type="Book">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="title" property="title" jdbcType="VARCHAR"/>
        <result column="author" property="author" jdbcType="VARCHAR"/>
        <result column="description" property="description" jdbcType="VARCHAR"/>
        <result column="available" property="isAvailable" jdbcType="BOOLEAN"/>
    </resultMap>

    <resultMap id="fullBookMap" extends="baseBookMap" type="Book">
        <association column="owner_id" property="owner" javaType="User"
                     select="pl.akai.bookcrossing.login.UserDaoMapper.getUserById"/>
        <association column="reader_id" property="reader" javaType="User"
                     select="pl.akai.bookcrossing.login.UserDaoMapper.getUserById"/>
        <collection column="id" property="tagList" javaType="ArrayList" ofType="Tag" select="getTagsByBookId"/>
    </resultMap>

    <resultMap id="bookTagsMap" type="Tag">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="baseBookRentRequestMap" type="BookRentRequest">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <association column="requester_id" property="requester" javaType="User"
                     select="pl.akai.bookcrossing.login.UserDaoMapper.getUserById"/>
        <association column="book_id" property="book" javaType="Book"
                     select="pl.akai.bookcrossing.list.BookDaoMapper.getBookById"/>
    </resultMap>

    <select id="getAllBooks" resultMap="fullBookMap">
        SELECT *
        FROM tb_book;
    </select>

    <select id="getBookById" resultMap="fullBookMap">
        SELECT *
        FROM tb_book
        WHERE id = #{id}
    </select>

    <insert id="insertBook" useGeneratedKeys="true" keyProperty="book.id" keyColumn="id">
        INSERT INTO tb_book (title, author, description, owner_id, reader_id)
        VALUES (#{book.title}, #{book.author}, #{book.description}, #{book.owner.id}, #{book.reader.id});
    </insert>

    <select id="getBooksByOwnerId" resultMap="fullBookMap">
        SELECT *
        FROM tb_book
        WHERE owner_id = #{user_id};
    </select>

    <select id="getBooksByReaderId" resultMap="fullBookMap">
        SELECT *
        FROM tb_book
        WHERE reader_id = #{user_id};
    </select>

    <select id="getTagsByBookId" resultMap="bookTagsMap">
        SELECT t.name
        FROM tb_book_tags bt
                 INNER JOIN tb_tag t ON (t.id = bt.tag_id)
        WHERE bt.book_id = #{id};
    </select>

    <select id="getBooksByTagId" resultMap="fullBookMap">
        SELECT b.*
        FROM tb_book_tags bt
                 INNER JOIN tb_book b on bt.book_id = b.id
        WHERE bt.tag_id = #{id};
    </select>

    <select id="filterBooksByKeyword" resultMap="fullBookMap">
        SELECT b.*
        FROM tb_book b
                 LEFT JOIN tb_book_tags tbt on b.id = tbt.book_id
                 LEFT JOIN tb_tag tt on tbt.tag_id = tt.id
        WHERE author LIKE concat('%', #{keyword}, '%')
           OR title LIKE concat('%', #{keyword}, '%')
           OR name LIKE concat('%', #{keyword}, '%');
    </select>

    <insert id="insertTag" useGeneratedKeys="true" keyProperty="tag.id" keyColumn="id">
        INSERT INTO tb_tag (name)
        VALUES (upper(#{tag.name}));
    </insert>

    <select id="getAllTags" resultMap="bookTagsMap">
        SELECT *
        FROM tb_tag;
    </select>

    <select id="getTagByName" resultMap="bookTagsMap">
        SELECT *
        FROM tb_tag
        WHERE name like upper(#{name})
        LIMIT 1;
    </select>

    <insert id="insertBookTag">
        INSERT INTO tb_book_tags (book_id, tag_id)
        VALUES (#{bookId}, #{tagId});
    </insert>

    <update id="updateReader">
        UPDATE tb_book
        SET reader_id = #{readerId}
        WHERE id = #{bookId};
    </update>

    <update id="updateAvailable">
        UPDATE tb_book
        SET available = #{available}
        WHERE id = #{bookId};
    </update>

    <insert id="insertBookUserRequest">
        INSERT INTO tb_book_user_request (requester_id, book_id)
        VALUES (#{bookRentRequest.requester.id}, #{bookRentRequest.book.id});
    </insert>

    <select id="getBookRentRequestsById" resultMap="baseBookRentRequestMap">
        SELECT tbur.*
        FROM tb_book_user_request tbur
                 INNER JOIN tb_user u ON (u.id = tbur.requester_id)
                 INNER JOIN tb_book b on (b.id = tbur.book_id)
        WHERE tbur.id = #{id};
    </select>

    <select id="getBookRentRequestsByOwnerId" resultMap="baseBookRentRequestMap">
        SELECT tbur.*
        FROM tb_book_user_request tbur
                 INNER JOIN tb_user u ON (u.id = tbur.requester_id)
                 INNER JOIN tb_book b on (b.id = tbur.book_id)
        WHERE b.owner_id = #{ownerId};
    </select>

    <select id="getBookRentRequestByOwnerAndBookIds" resultType="Integer">
        SELECT count(*)
        FROM tb_book_user_request tbur
        WHERE tbur.requester_id = #{requesterId}
          AND tbur.book_id = #{bookId};
    </select>

    <delete id="deleteBookRentRequestsById">
        DELETE
        FROM tb_book_user_request tbur
        WHERE tbur.id = ${id}
    </delete>
</mapper>
